Use local refrence to get access to element in your component html template 
    ie #addMe, the local reference is only available in the template.

You can also use the @viewChild() decorator to pass element from your template 
to the component.
    @viewChild('addMe') localRef
    
    const = localRef => ...
    The view child is of type ElementRef. The ElementRef has a method nativeElement which you can use 
    to get the value of the localRef.


LifeCycle Hooks
=> ngOnChanges: called after a bound input property changes.
=> ngOninit: called once the component is intailzed. it will run after the constructor
=> ngDoCheck: called during every change detection run.
=> ngAfterContentInit: called after content( ng-content) has been projected into view
=> ngAfterContentChecked: called everytime project content has been checked.
=> ngAfterViewInit: Called After the component view (and child view) has been intailzed
=> ngAfterViewChecked: Called evrytime the view has been checked.
=> ngOnDestroy: called once a component is about to be destroyed.

You can create your own directives with the @Directive decorator.

Services 
    This is like a local storage where you centeralise your code, say you have some
    codes that are repeated alot, you can put them in your services to use them anywhere
    In your application.

    When you provde a service in a component, the same instance is available through out
    all the child or children of that component. When the services is provided at the application
    level the same instanceof that service will be available everywhere in the app.

    You can inject service into service, to do this, you need to provide the service that
    will be injected into the app module provider, and also in the recieving services
    add the @Injectables() decorator, to tell angular you want to inject a service.